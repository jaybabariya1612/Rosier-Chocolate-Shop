@model IEnumerable<RosierBars.Models.ProductModel>

@{
    ViewBag.Title = "Your Chocolate Cart";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<style>
    :root {
        --chocolate-dark: #3D1A0B;
        --chocolate-medium: #5C3A21;
        --chocolate-light: #8B5A2B;
        --caramel: #D4A76A;
        --cream: #F5E5C6;
        --mint: #A2D9B1;
        --berry: #C45E7F;
    }

    /* Base Styles */
    body {
        background-color: #FFF9F2;
        color: var(--chocolate-dark);
        font-family: 'Montserrat', 'Segoe UI', sans-serif;
    }

    /* Cart Container */
    .cart-container {
        max-width: 1200px;
        margin: 2rem auto;
        padding: 2rem;
        background: white;
        border-radius: 16px;
        box-shadow: 0 8px 32px rgba(139, 90, 43, 0.1);
    }

    .cart-title {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 2rem;
        color: var(--chocolate-dark);
        position: relative;
        padding-bottom: 1rem;
        font-family: 'Playfair Display', serif;
    }

        .cart-title:after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 80px;
            height: 4px;
            background: linear-gradient(90deg, var(--chocolate-light), var(--caramel));
            border-radius: 2px;
        }

    /* Empty Cart State */
    .empty-cart {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 4rem 2rem;
        text-align: center;
        background: var(--cream);
        border-radius: 12px;
        animation: fadeIn 0.6s ease-out;
    }

    .empty-cart-icon {
        font-size: 6rem;
        color: var(--chocolate-light);
        margin-bottom: 1.5rem;
        animation: bounce 2s infinite;
    }

    .empty-cart-message {
        font-size: 1.8rem;
        color: var(--chocolate-medium);
        margin-bottom: 1.5rem;
        font-weight: 600;
    }

    .empty-cart-btn {
        padding: 1rem 2rem;
        background: linear-gradient(135deg, var(--chocolate-light), var(--chocolate-dark));
        color: white;
        border: none;
        border-radius: 50px;
        font-size: 1.1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 4px 12px rgba(92, 58, 33, 0.2);
        text-transform: uppercase;
        letter-spacing: 1px;
    }

        .empty-cart-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 16px rgba(92, 58, 33, 0.3);
        }

    /* Cart Items */
    .cart-items {
        display: grid;
        gap: 1.5rem;
    }

    .cart-item {
        display: grid;
        grid-template-columns: auto 1fr auto auto auto;
        align-items: center;
        gap: 2rem;
        padding: 1.5rem;
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 16px rgba(139, 90, 43, 0.08);
        transition: all 0.3s ease;
        animation: slideUp 0.5s ease-out;
    }

        .cart-item:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(139, 90, 43, 0.12);
        }

    .product-image-container {
        position: relative;
        width: 100px;
        height: 100px;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .product-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.5s ease;
    }

    .cart-item:hover .product-image {
        transform: scale(1.05);
    }

    .product-info {
        display: flex;
        flex-direction: column;
    }

    .product-name {
        font-size: 1.2rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: var(--chocolate-dark);
    }

    .product-details {
        font-size: 0.9rem;
        color: var(--chocolate-medium);
        display: flex;
        gap: 1rem;
    }

        .product-details span {
            display: flex;
            align-items: center;
        }

        .product-details i {
            margin-right: 0.3rem;
            color: var(--caramel);
        }

    .price {
        font-weight: 700;
        color: var(--chocolate-dark);
        font-size: 1.1rem;
    }

    .original-price {
        text-decoration: line-through;
        color: #AAA;
        font-size: 0.9rem;
    }

    .discount-badge {
        background-color: var(--berry);
        color: white;
        padding: 0.2rem 0.5rem;
        border-radius: 4px;
        font-size: 0.8rem;
        font-weight: 600;
        margin-left: 0.5rem;
    }

    /* Quantity Controls */
    .quantity-control {
        display: flex;
        align-items: center;
        background: var(--cream);
        border-radius: 50px;
        padding: 0.3rem;
    }

    .quantity-btn {
        width: 32px;
        height: 32px;
        background: white;
        border: none;
        font-size: 1.2rem;
        font-weight: 600;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        color: var(--chocolate-dark);
        transition: all 0.2s ease;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

        .quantity-btn:hover {
            background: var(--chocolate-light);
            color: white;
        }

    .quantity-input {
        width: 40px;
        height: 32px;
        text-align: center;
        border: none;
        background: transparent;
        font-weight: 600;
        color: var(--chocolate-dark);
    }

    /* Remove Button */
    .remove-btn {
        background: none;
        border: none;
        color: #AAA;
        cursor: pointer;
        font-size: 1.2rem;
        transition: all 0.3s ease;
        padding: 0.5rem;
        border-radius: 50%;
    }

        .remove-btn:hover {
            color: var(--berry);
            background: rgba(196, 94, 127, 0.1);
            transform: rotate(90deg);
        }

    /* Cart Summary */
    .cart-summary {
        background: linear-gradient(135deg, var(--cream), white);
        padding: 2rem;
        border-radius: 16px;
        margin-top: 3rem;
        box-shadow: 0 4px 16px rgba(139, 90, 43, 0.08);
        animation: fadeIn 0.6s ease-out;
    }

    .summary-title {
        font-size: 1.5rem;
        font-weight: 600;
        margin-bottom: 1.5rem;
        color: var(--chocolate-dark);
        font-family: 'Playfair Display', serif;
    }

    .summary-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 1rem;
        font-size: 1.1rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px dashed var(--caramel);
    }

    .summary-total {
        font-weight: 700;
        font-size: 1.4rem;
        color: var(--chocolate-dark);
        margin-top: 1rem;
    }

    .checkout-btn {
        width: 100%;
        padding: 1.2rem;
        background: linear-gradient(135deg, var(--chocolate-light), var(--chocolate-dark));
        color: white;
        border: none;
        border-radius: 50px;
        font-size: 1.1rem;
        font-weight: 600;
        cursor: pointer;
        margin-top: 2rem;
        transition: all 0.3s ease;
        box-shadow: 0 4px 12px rgba(92, 58, 33, 0.3);
        text-transform: uppercase;
        letter-spacing: 1px;
    }

        .checkout-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 16px rgba(92, 58, 33, 0.4);
        }

    /* Add to your existing CSS */
    .cart-item.updating {
        opacity: 0.7;
        pointer-events: none;
    }

        .cart-item.updating .quantity-control,
        .cart-item.updating .remove-btn {
            cursor: not-allowed;
        }

        .cart-item.updating::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.5);
            z-index: 10;
        }

    /* Animations */
    @@keyframes fadeIn {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }

    @@keyframes slideUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes bounce {
        0%, 20%, 50%, 80%, 100% {
            transform: translateY(0);
        }

        40% {
            transform: translateY(-20px);
        }

        60% {
            transform: translateY(-10px);
        }
    }

    /* Responsive */
    @@media (max-width: 992px) {
        .cart-item {
            grid-template-columns: auto 1fr;
            grid-template-rows: auto auto;
        }

        .price, .quantity-control, .remove-btn {
            grid-column: 2;
            justify-self: start;
        }
    }

    @@media (max-width: 576px) {
        .cart-container {
            padding: 1rem;
        }

        .cart-item {
            gap: 1rem;
            padding: 1rem;
        }

        .product-image-container {
            width: 80px;
            height: 80px;
        }
    }
</style>
<div class="cart-container">
    <h1 class="cart-title mt-5 pt-3">Your Chocolate Cart</h1>

    @if (Session["Username"] == null)
    {
        <div class="empty-cart mt-5 pt-5">
            <div class="empty-cart-icon">🍫</div>
            <h2 class="empty-cart-message">Your chocolate cart is empty</h2>
            <p>Log in to view your sweet selections</p>
            <a href="@Url.Action("Login", "Register")" class="empty-cart-btn text-decoration-none">Log In</a>
        </div>
    }
    else if (!Model.Any())
    {
        <div class="empty-cart">
            <div class="empty-cart-icon">🍫</div>
            <h2 class="empty-cart-message">Your cart needs chocolate!</h2>
            <p>Explore our delicious collection to satisfy your cravings</p>
            <a href="@Url.Action("Shop", "Shop")" class="empty-cart-btn text-decoration-none">Browse Chocolates</a>
        </div>
    }
    else
    {
        <div class="cart-items">
            @foreach (var item in Model)
            {
                <div class="cart-item" data-item-id="@item.ProductId">
                    <div class="product-image-container">
                        <a href="@Url.Action("BackToProduct", "Shop", new { id = item.ProductId })">
                            <img src="@Url.Content("~/Content/images/" + item.ImageUrl)" alt="@item.ProductName" class="product-image" />
                        </a>
                    </div>

                    <div class="product-info">
                        <h3 class="product-name">@item.ProductName</h3>
                        <div class="product-details">
                            <span><i class="fas fa-wine-bottle"></i> @item.PackOf</span>
                            <span><i class="fas fa-tag"></i> @item.Flavor</span>
                            <span><i class="fas fa-weight"></i> @item.NetQuantity</span>
                        </div>
                    </div>

                    <div class="price">
                        ₹@item.Price.ToString("F2")
                        @if (item.DiscountPercent > 0)
                        {
                            <span class="original-price">₹@item.OriginalPrice.ToString("F2")</span>
                            <span class="discount-badge">@item.DiscountPercent% OFF</span>
                        }
                    </div>

                    <div class="quantity-control">
                        <button class="quantity-btn" onclick="updateQuantity(@item.ProductId, -1)">-</button>
                        <input type="text" class="quantity-input" value="@item.OrderQuantity" id="quantity-@item.ProductId" readonly>
                        <button class="quantity-btn" onclick="updateQuantity(@item.ProductId, 1)">+</button>
                    </div>

                    <button class="remove-btn" onclick="removeItem(@item.ProductId)" title="Remove">
                        <i class="fas fa-trash-can"></i>
                    </button>

                    <div class="item-total" id="total-@item.ProductId" data-price="@item.Price">₹@((item.Price * item.OrderQuantity).ToString("F2"))</div>
                </div>
            }
        </div>

        <div class="cart-summary">
            <h3 class="summary-title">Order Summary</h3>
            <div class="summary-row">
                <span>Subtotal</span>
                <span id="subtotal">₹@Model.Sum(p => p.Price * p.OrderQuantity).ToString("F2")</span>
            </div>
            <div class="summary-row">
                <span>Shipping</span>
                <span>FREE</span>
            </div>
            <div class="summary-row">
                <span>Gift Packaging</span>
                <span>₹0.00</span>
            </div>
            <div class="summary-row summary-total">
                <span>Total</span>
                <span id="grand-total">₹@Model.Sum(p => p.Price * p.OrderQuantity).ToString("F2")</span>
            </div>
            <button class="checkout-btn" onclick="proceedToCheckout()">
                <i class="fas fa-shopping-bag"></i> Checkout Now
            </button>
        </div>
    }
</div>



<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    // Update quantity function with AJAX
    function updateQuantity(productId, change) {
        const qtyInput = $(`#quantity-${productId}`);
        let currentQty = parseInt(qtyInput.val()) || 1;
        let newQty = currentQty + change;

        if (newQty < 1) {
            // Instead of an alert, you could add a small visual cue
            const btn = qtyInput.prev('.quantity-btn');
            btn.css('transform', 'scale(0.8)').setTimeout(() => btn.css('transform', ''), 200);
            return;
        }

        const item = $(`.cart-item[data-item-id="${productId}"]`);
        item.addClass('updating');

        // Optimistic UI Update
        qtyInput.val(newQty);
        updateItemTotal(productId, newQty);
        updateCartTotals();

        $.ajax({
            url: '@Url.Action("UpdateQuantity", "Shop")',
            type: 'POST',
            data: {
                productId: productId,
                OrderQuantity: newQty
            },
            success: function (data) {
                if (data.success) {
                    // Trust the server's calculation for final totals
                    $('#subtotal').text(`₹${data.newSubtotal.toFixed(2)}`);
                    $('#grand-total').text(`₹${data.newSubtotal.toFixed(2)}`);
                } else {
                    // Revert UI if server update failed
                    qtyInput.val(currentQty);
                    updateItemTotal(productId, currentQty);
                    updateCartTotals();
                    alert(data.message || "Failed to update quantity");
                }
            },
            error: function (xhr) {
                // Revert UI on error
                qtyInput.val(currentQty);
                updateItemTotal(productId, currentQty);
                updateCartTotals();
                alert("An error occurred. Please try again.");
            },
            complete: function () {
                item.removeClass('updating');
            }
        });
    }

    // Remove item function with AJAX
    function removeItem(productId) {

        const item = $(`.cart-item[data-item-id="${productId}"]`);
        item.addClass('updating').css({
            'transform': 'translateX(50px)',
            'opacity': '0',
            'transition': 'all 0.4s ease'
        });

        $.ajax({
            url: '@Url.Action("RemoveItem", "Shop")',
            type: 'POST',
            data: { productId: productId },
            success: function (data) {
                if (data.success) {
                    setTimeout(() => {
                        item.remove();
                        // If cart is now empty, reload to show the empty state message
                        if (data.isEmpty) {
                            window.location.reload();
                        } else {
                            // Update totals directly from server response
                            $('#subtotal').text(`₹${data.newSubtotal.toFixed(2)}`);
                            $('#grand-total').text(`₹${data.newSubtotal.toFixed(2)}`);
                        }
                    }, 400); // Wait for CSS animation
                } else {
                    item.removeClass('updating').css({ 'transform': '', 'opacity': '' });
                    alert(data.message || "Failed to remove item");
                }
            },
            error: function (xhr) {
                item.removeClass('updating').css({ 'transform': '', 'opacity': '' });
                alert("An error occurred. Please try again.");
            },
        });
    }

    // Helper to update a single item's total
    function updateItemTotal(productId, newQty) {
        const itemTotalEl = $(`#total-${productId}`);
        const itemPrice = parseFloat(itemTotalEl.data('price'));
        itemTotalEl.text(`₹${(itemPrice * newQty).toFixed(2)}`);
    }

    // Helper to update grand totals based on DOM state
    function updateCartTotals() {
        let subtotal = 0;
        $('.item-total').each(function () {
            subtotal += parseFloat($(this).text().replace('₹', ''));
        });
        $('#subtotal').text(`₹${subtotal.toFixed(2)}`);
        $('#grand-total').text(`₹${subtotal.toFixed(2)}`);
    }

    function proceedToCheckout() {
        window.location.href = '@Url.Action("Checkout", "Shop")';
    }

    // Page load animations
    $(document).ready(function () {
        $('.cart-item').each(function (index) {
            $(this).css({
                'opacity': '0',
                'transform': 'translateY(20px)',
                'transition': `all 0.4s ease ${index * 0.1}s`
            });
            setTimeout(() => {
                $(this).css({ 'opacity': '1', 'transform': 'translateY(0)' });
            }, 50);
        });
    });
</script>