@model RosierBars.Models.ProductModel

@{
    ViewBag.Title = "Add Product";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- CSS Styling -->
<style>

    .alert-danger {
        --bs-alert-color: #fffefd;
        --bs-alert-bg: #fffefd;
        --bs-alert-border-color: #fffefd;
    }

    :root {
        --chocolate-dark: #4B2C20;
        --chocolate-medium: #7B3F00;
        --chocolate-light: #D2691E;
        --chocolate-cream: #FFF8E1;
        --chocolate-gold: #FFD700;
        --chocolate-milk: #F5F5DC;
    }

    body {
        font-family: 'Montserrat', sans-serif;
        background-color: var(--chocolate-cream);
    }

    input, select, textarea {
        max-width: 100%;
        background-color: var(--chocolate-milk);
        border: 1px solid var(--chocolate-light);
        border-radius: 6px;
        padding: 10px 15px;
    }

        input:focus, select:focus, textarea:focus {
            border-color: var(--chocolate-medium);
            box-shadow: 0 0 0 0.25rem rgba(123, 63, 0, 0.25);
            background-color: white;
        }

    .form-wrapper {
        max-width: 1000px;
        margin: 30px auto;
        background: linear-gradient(135deg, #FFFFFF 0%, #FFF8E1 100%);
        border-radius: 16px;
        margin-top:150px;
        padding: 40px;
        box-shadow: 0 10px 30px rgba(75, 44, 32, 0.15);
        border: 1px solid var(--chocolate-light);
    }

    .form-title {
        font-size: 2.2rem;
        font-weight: 700;
        text-align: center;
        margin-bottom: 30px;
        color: var(--chocolate-dark);
        position: relative;
        padding-bottom: 15px;
    }

        .form-title:after {
            content: "";
            position: absolute;
            bottom: 0;
            left: 50%;
            transform: translateX(-50%);
            width: 100px;
            height: 4px;
            background: linear-gradient(90deg, var(--chocolate-gold), var(--chocolate-light));
            border-radius: 2px;
        }

    .dropzone {
        border: 2px dashed var(--chocolate-light);
        border-radius: 12px;
        padding: 30px;
        text-align: center;
        cursor: pointer;
        transition: all 0.3s ease;
        background-color: rgba(255, 248, 225, 0.5);
    }

        .dropzone:hover {
            background-color: rgba(210, 105, 30, 0.1);
            border-color: var(--chocolate-medium);
        }

        .dropzone i {
            color: var(--chocolate-medium);
            margin-bottom: 15px;
        }

        .dropzone p {
            color: var(--chocolate-medium);
            font-weight: 500;
            margin-bottom: 0;
        }

        .dropzone img {
            max-width: 100%;
            height: auto;
            margin-top: 10px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

    .form-submit {
        text-align: center;
        margin-top: 40px;
    }

    #preview-container {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        margin-top: 20px;
        justify-content: center;
    }

        #preview-container img {
            width: 120px;
            height: 120px;
            object-fit: cover;
            border-radius: 8px;
            border: 2px solid var(--chocolate-light);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s;
        }

            #preview-container img:hover {
                transform: scale(1.05);
            }

    .form-label {
        font-weight: 600;
        color: var(--chocolate-dark);
        margin-bottom: 8px;
        display: block;
    }

    .btn-primary {
        background-color: var(--chocolate-medium);
        border-color: var(--chocolate-medium);
        padding: 12px 30px;
        font-weight: 600;
        border-radius: 50px;
        transition: all 0.3s;
        box-shadow: 0 4px 15px rgba(123, 63, 0, 0.3);
    }

        .btn-primary:hover {
            background-color: var(--chocolate-dark);
            border-color: var(--chocolate-dark);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(75, 44, 32, 0.4);
        }

    .btn-outline-secondary {
        border-color: var(--chocolate-light);
        color: var(--chocolate-medium);
        border-radius: 50px;
        padding: 8px 20px;
        font-weight: 500;
        transition: all 0.3s;
    }

        .btn-outline-secondary:hover {
            background-color: var(--chocolate-light);
            color: white;
            border-color: var(--chocolate-light);
        }

    .text-danger {
        color: #dc3545;
        font-size: 0.85rem;
        margin-top: 5px;
    }

    .field-icon {
        width: 24px;
        height: 24px;
        margin-right: 10px;
        vertical-align: middle;
        color: var(--chocolate-medium);
    }

    .form-group {
        margin-bottom: 20px;
    }

    .section-title {
        font-size: 1.3rem;
        color: var(--chocolate-medium);
        font-weight: 600;
        margin: 30px 0 15px;
        border-bottom: 1px solid var(--chocolate-light);
        padding-bottom: 8px;
    }

    @@media (max-width: 768px) {
        .form-wrapper {
            padding: 25px;
            margin: 15px;
        }

        .form-title {
            font-size: 1.8rem;
        }
    }

    /* Chocolate-themed decorations */
    .choco-decoration {
        position: absolute;
        opacity: 0.1;
        z-index: -1;
    }

    .choco-1 {
        top: 50px;
        right: 50px;
        width: 150px;
        height: 150px;
        background: radial-gradient(circle, var(--chocolate-medium) 0%, transparent 70%);
    }

    .choco-2 {
        bottom: 100px;
        left: 50px;
        width: 100px;
        height: 100px;
        background: radial-gradient(circle, var(--chocolate-gold) 0%, transparent 70%);
    }
</style>

<!-- Chocolate SVG Icons -->
<svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
    <symbol id="icon-chocolate-bar" viewBox="0 0 24 24">
        <path fill="currentColor" d="M3,2H21A1,1 0 0,1 22,3V21A1,1 0 0,1 21,22H3A1,1 0 0,1 2,21V3A1,1 0 0,1 3,2M15,10A2,2 0 0,0 13,12A2,2 0 0,0 15,14A2,2 0 0,0 17,12A2,2 0 0,0 15,10M11,16V18H13V16H11M11,4V6H13V4H11M7,4V6H9V4H7M4,4V6H6V4H4M4,7V9H6V7H4M4,10V12H6V10H4M4,13V15H6V13H4M4,16V18H6V16H4M7,16V18H9V16H7M19,7V9H17V7H19M19,10V12H17V10H19M19,13V15H17V13H19M19,16V18H17V16H19Z" />
    </symbol>
    <symbol id="icon-brand" viewBox="0 0 24 24">
        <path fill="currentColor" d="M5.5,7A1.5,1.5 0 0,1 4,5.5A1.5,1.5 0 0,1 5.5,4A1.5,1.5 0 0,1 7,5.5A1.5,1.5 0 0,1 5.5,7M21.41,11.58L12.41,2.58C12.05,2.22 11.55,2 11,2H4C2.89,2 2,2.89 2,4V11C2,11.55 2.22,12.05 2.59,12.41L11.58,21.41C11.95,21.77 12.45,22 13,22C13.55,22 14.05,21.77 14.41,21.41L21.41,14.41C21.77,14.05 22,13.55 22,13C22,12.44 21.77,11.94 21.41,11.58Z" />
    </symbol>
    <symbol id="icon-price-tag" viewBox="0 0 24 24">
        <path fill="currentColor" d="M21.41 11.58L12.41 2.58C12.05 2.22 11.55 2 11 2H4C2.9 2 2 2.9 2 4V11C2 11.55 2.22 12.05 2.59 12.42L11.59 21.42C11.95 21.78 12.45 22 13 22C13.55 22 14.05 21.78 14.41 21.41L21.41 14.41C21.78 14.05 22 13.55 22 13C22 12.45 21.77 11.94 21.41 11.58M13 20L4 11V4H11L20 13M6.5 5C7.3 5 8 5.7 8 6.5S7.3 8 6.5 8 5 7.3 5 6.5 5.7 5 6.5 5Z" />
    </symbol>
    <symbol id="icon-ingredients" viewBox="0 0 24 24">
        <path fill="currentColor" d="M16.2 3.8C15 2.7 13.5 2.2 12 2.2S9 2.7 7.8 3.8C6.7 5 6.2 6.5 6.2 8S6.7 11 7.8 12.2L12 16.4L16.2 12.2C17.3 11 17.8 9.5 17.8 8S17.3 5 16.2 3.8M12 18.3L5.3 11.6C3.5 9.8 2.8 7.3 3.3 4.9C3.8 2.5 5.4 0.6 7.6 0.1C9.8-0.4 12.1 0.6 13.7 2.3C15.3 4 16 6.1 15.8 8.3C15.6 10.5 14.6 12.5 13 13.9L12 14.9L11 13.9C9.4 12.5 8.4 10.5 8.2 8.3C8 6.1 8.7 4 10.3 2.3C11.1 1.5 12 1 13 0.8C13.1 0.8 13.1 0.8 13.2 0.8C12.8 1.8 12.6 2.9 12.7 4C12.8 5.1 13.2 6.1 13.9 7C14.6 7.9 15.5 8.5 16.5 8.8C16.8 7.7 16.7 6.5 16.2 5.5C15.7 4.4 14.8 3.6 13.7 3.1C14.6 4.2 15.1 5.6 15.1 7C15.1 8.4 14.6 9.8 13.7 10.9L12 12.6L10.3 10.9C9.4 9.8 8.9 8.4 8.9 7C8.9 5.6 9.4 4.2 10.3 3.1C9.2 3.6 8.3 4.4 7.8 5.5C7.3 6.5 7.2 7.7 7.5 8.8C8.5 8.5 9.4 7.9 10.1 7C10.8 6.1 11.2 5.1 11.3 4C11.4 2.9 11.2 1.8 10.8 0.8C11.8 1 12.8 1.5 13.6 2.3C15.2 4 15.9 6.1 15.7 8.3C15.5 10.5 14.5 12.5 12.9 13.9L12 14.9L11.1 13.9C9.5 12.5 8.5 10.5 8.3 8.3C8.1 6.1 8.8 4 10.4 2.3C11.2 1.5 12.1 1 13.1 0.8C13.2 0.8 13.2 0.8 13.3 0.8C15.5 1.3 17.1 3.2 17.6 5.6C18.1 8 17.4 10.5 15.6 12.3L12 15.9L8.4 12.3C6.6 10.5 5.9 8 6.4 5.6C6.9 3.2 8.5 1.3 10.7 0.8C10.8 0.8 10.8 0.8 10.9 0.8C12.9 1.1 14.6 2.4 15.5 4.2C16.4 6 16.4 8.1 15.5 9.9L12 13.4L8.5 9.9C7.6 8.1 7.6 6 8.5 4.2C9.4 2.4 11.1 1.1 13.1 0.8C13.2 0.8 13.2 0.8 13.3 0.8C15.5 1.3 17.1 3.2 17.6 5.6C18.1 8 17.4 10.5 15.6 12.3L12 15.9L8.4 12.3C6.6 10.5 5.9 8 6.4 5.6C6.9 3.2 8.5 1.3 10.7 0.8C10.8 0.8 10.8 0.8 10.9 0.8C12.9 1.1 14.6 2.4 15.5 4.2C16.4 6 16.4 8.1 15.5 9.9L12 13.4L8.5 9.9C7.6 8.1 7.6 6 8.5 4.2C9.4 2.4 11.1 1.1 13.1 0.8C13.2 0.8 13.2 0.8 13.3 0.8C15.5 1.3 17.1 3.2 17.6 5.6C18.1 8 17.4 10.5 15.6 12.3L12 15.9L8.4 12.3C6.6 10.5 5.9 8 6.4 5.6C6.9 3.2 8.5 1.3 10.7 0.8C10.8 0.8 10.8 0.8 10.9 0.8C12.9 1.1 14.6 2.4 15.5 4.2C16.4 6 16.4 8.1 15.5 9.9L12 13.4L8.5 9.9C7.6 8.1 7.6 6 8.5 4.2C9.4 2.4 11.1 1.1 13.1 0.8C13.2 0.8 13.2 0.8 13.3 0.8C15.5 1.3 17.1 3.2 17.6 5.6C18.1 8 17.4 10.5 15.6 12.3L12 18.3Z" />
    </symbol>
    <symbol id="icon-nutrition" viewBox="0 0 24 24">
        <path fill="currentColor" d="M22,21H2V3H4V19H6V10H10V19H12V6H16V19H18V14H22V21Z" />
    </symbol>
    <symbol id="icon-dimensions" viewBox="0 0 24 24">
        <path fill="currentColor" d="M3,5H16V7H3V5M3,9H13V11H3V9M1,13H3V15H1V13M3,17H11V19H3V17M1,21H3V23H1V21M21,13H23V15H21V13M19,17H21V19H19V17M21,9H23V11H21V9M21,5H23V7H21V5M19,21H21V23H19V21M17,13H19V15H17V13M15,17H17V19H15V17M13,21H15V23H13V21Z" />
    </symbol>
    <symbol id="icon-upload" viewBox="0 0 24 24">
        <path fill="currentColor" d="M9,16V10H5L12,3L19,10H15V16H9M5,20V18H19V20H5Z" />
    </symbol>
</svg>

<!-- Form Layout -->
<div class="form-wrapper product-div">
    <!-- Chocolate decorative elements -->
    <div class="choco-decoration choco-1"></div>
    <div class="choco-decoration choco-2"></div>

    <h2 class="form-title mt-2 mb-2=">@TempData["Success"] @ViewBag.ProductMessage </h2>
    <h2 class="form-title">Add Chocolate Product</h2>

    @using (Html.BeginForm("Product", "Product", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })

        <div class="row g-3">

            <!-- Product Image Section -->
            <div class="col-md-12">
                <label class="form-label">
                    <svg class="icon field-icon" width="24" height="24">
                        <use xlink:href="#icon-upload" />
                    </svg>
                    Product Images (Max 5)
                </label>
                <div id="dropzone" class="dropzone border p-4 text-center">
                    <svg class="icon" width="48" height="48">
                        <use xlink:href="#icon-chocolate-bar" />
                    </svg>
                    <p>Drag & drop chocolate photos or click to upload</p>
                    <input type="file" id="ImageUpload" name="ImageFiles" accept="image/*" class="d-none" multiple />
                    <div id="preview-container" class="mt-3 d-flex flex-wrap gap-3"></div>
                </div>
                @Html.HiddenFor(m => m.ImageUrl, new { id = "ImageUrl" })
            </div>

            <!-- Basic Information Section -->
            <div class="col-md-12">
                <h4 class="section-title">
                    <svg class="icon field-icon" width="24" height="24">
                        <use xlink:href="#icon-chocolate-bar" />
                    </svg>
                    Chocolate Details
                </h4>
            </div>

            <!-- Product Name -->
            <div class="col-md-4">
                @Html.LabelFor(m => m.ProductName)
                @Html.TextBoxFor(m => m.ProductName, new { @class = "form-control", placeholder = "e.g. Dark Chocolate Truffles" })
                @Html.ValidationMessageFor(m => m.ProductName, "", new { @class = "text-danger" })
            </div>

            <!-- Brand -->
            <div class="col-md-4">
                @Html.LabelFor(m => m.Brand)
                @Html.TextBoxFor(m => m.Brand, new { @class = "form-control", placeholder = "e.g. ChocoDelight" })
                @Html.ValidationMessageFor(m => m.Brand, "", new { @class = "text-danger" })
            </div>

            <!-- Model Name -->
            <div class="col-md-4">
                @Html.LabelFor(m => m.ModelName)
                @Html.TextBoxFor(m => m.ModelName, new { @class = "form-control", placeholder = "e.g. Premium Collection" })
                @Html.ValidationMessageFor(m => m.ModelName, "", new { @class = "text-danger" })
            </div>

            <!-- Description -->
            <div class="col-md-12">
                @Html.LabelFor(m => m.Description)
                @Html.TextAreaFor(m => m.Description, new { @class = "form-control", rows = "3", placeholder = "Describe the chocolate's taste, texture, and unique features..." })
                @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
            </div>

            <!-- Pricing Section -->
            <div class="col-md-12">
                <h4 class="section-title">
                    <svg class="icon field-icon" width="24" height="24">
                        <use xlink:href="#icon-price-tag" />
                    </svg>
                    Pricing & Availability
                </h4>
            </div>

            <!-- Price -->
            <div class="col-md-4">
                @Html.LabelFor(m => m.Price)
                <div class="input-group">
                    <span class="input-group-text">₹</span>
                    @Html.TextBoxFor(m => m.Price, new { @class = "form-control", placeholder = "Current price" })
                </div>
                @Html.ValidationMessageFor(m => m.Price, "", new { @class = "text-danger" })
            </div>

            <!-- Original Price -->
            <div class="col-md-4">
                @Html.LabelFor(m => m.OriginalPrice)
                <div class="input-group">
                    <span class="input-group-text">₹</span>
                    @Html.TextBoxFor(m => m.OriginalPrice, new { @class = "form-control", placeholder = "Original price" })
                </div>
                @Html.ValidationMessageFor(m => m.OriginalPrice, "", new { @class = "text-danger" })
            </div>

            <!-- Discount Percent -->
            <div class="col-md-4">
                @Html.LabelFor(m => m.DiscountPercent)
                <div class="input-group">
                    @Html.TextBoxFor(m => m.DiscountPercent, new { @class = "form-control", placeholder = "0" })
                    <span class="input-group-text">%</span>
                </div>
                @Html.ValidationMessageFor(m => m.DiscountPercent, "", new { @class = "text-danger" })
            </div>

            <!-- Available -->
            <div class="col-md-4">
                @Html.LabelFor(m => m.Available)
                @Html.DropDownListFor(m => m.Available, new SelectList(new[] { "Yes", "No" }), new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Available, "", new { @class = "text-danger" })
            </div>

            <!-- Stock -->
            <div class="col-md-4">
                @Html.LabelFor(m => m.Stock)
                @Html.TextBoxFor(m => m.Stock, new { @class = "form-control", placeholder = "Quantity in stock" })
                @Html.ValidationMessageFor(m => m.Stock, "", new { @class = "text-danger" })
            </div>

            <!-- Flavor -->
            <div class="col-md-4">
                @Html.LabelFor(m => m.Flavor)
                @Html.TextBoxFor(m => m.Flavor, new { @class = "form-control", placeholder = "e.g. Dark, Milk, Hazelnut" })
                @Html.ValidationMessageFor(m => m.Flavor, "", new { @class = "text-danger" })
            </div>

            <!-- Product Characteristics Section -->
            <div class="col-md-12">
                <h4 class="section-title">
                    <svg class="icon field-icon" width="24" height="24">
                        <use xlink:href="#icon-brand" />
                    </svg>
                    Product Characteristics
                </h4>
            </div>

            <!-- Type -->
            <div class="col-md-4">
                @Html.LabelFor(m => m.Type)
                @Html.TextBoxFor(m => m.Type, new { @class = "form-control", placeholder = "e.g. Bar, Truffles, Box" })
                @Html.ValidationMessageFor(m => m.Type, "", new { @class = "text-danger" })
            </div>

            <!-- Food Preference -->
            <div class="col-md-4">
                @Html.LabelFor(m => m.FoodPreference)
                @Html.TextBoxFor(m => m.FoodPreference, new { @class = "form-control", placeholder = "e.g. Vegetarian, Vegan" })
                @Html.ValidationMessageFor(m => m.FoodPreference, "", new { @class = "text-danger" })
            </div>

            <!-- Pack of -->
            <div class="col-md-4">
                @Html.LabelFor(m => m.PackOf)
                @Html.TextBoxFor(m => m.PackOf, new { @class = "form-control", type = "number", placeholder = "Number of items in pack" })
                @Html.ValidationMessageFor(m => m.PackOf, "", new { @class = "text-danger" })
            </div>

            <!-- Net Quantity -->
            <div class="col-md-4">
                @Html.LabelFor(m => m.NetQuantity)
                @Html.TextBoxFor(m => m.NetQuantity, new { @class = "form-control", placeholder = "e.g. 100g, 250g" })
                @Html.ValidationMessageFor(m => m.NetQuantity, "", new { @class = "text-danger" })
            </div>

            <!-- Shelf Life -->
            <div class="col-md-4">
                @Html.LabelFor(m => m.ShelfLife)
                @Html.TextBoxFor(m => m.ShelfLife, new { @class = "form-control", placeholder = "e.g. 6 months" })
                @Html.ValidationMessageFor(m => m.ShelfLife, "", new { @class = "text-danger" })
            </div>

            <!-- Is Gourmet -->
            <div class="col-md-4">
                @Html.LabelFor(m => m.IsGourmet)
                @Html.DropDownListFor(m => m.IsGourmet, new SelectList(new[] { "Yes", "No" }), new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.IsGourmet, "", new { @class = "text-danger" })
            </div>

            <!-- Is Homemade -->
            <div class="col-md-4">
                @Html.LabelFor(m => m.IsHomemade)
                @Html.DropDownListFor(m => m.IsHomemade, new SelectList(new[] { "Yes", "No" }), new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.IsHomemade, "", new { @class = "text-danger" })
            </div>

            <!-- Is Gift Pack -->
            <div class="col-md-4">
                @Html.LabelFor(m => m.IsGiftPack)
                @Html.DropDownListFor(m => m.IsGiftPack, new SelectList(new[] { "Yes", "No" }), new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.IsGiftPack, "", new { @class = "text-danger" })
            </div>

            <!-- Seller -->
            <div class="col-md-4">
                @Html.LabelFor(m => m.Seller)
                @Html.TextBoxFor(m => m.Seller, new { @class = "form-control", placeholder = "Seller name" })
                @Html.ValidationMessageFor(m => m.Seller, "", new { @class = "text-danger" })
            </div>

            <!-- No Returns Allowed -->
            <div class="col-md-4">
                @Html.LabelFor(m => m.NoReturnsAllowed)
                @Html.DropDownListFor(m => m.NoReturnsAllowed, new SelectList(new[] { "Yes", "No" }), new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.NoReturnsAllowed, "", new { @class = "text-danger" })
            </div>

            <!-- GST Invoice Available -->
            <div class="col-md-4">
                @Html.LabelFor(m => m.GstInvoiceAvailable)
                @Html.DropDownListFor(m => m.GstInvoiceAvailable, new SelectList(new[] { "Yes", "No" }), new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.GstInvoiceAvailable, "", new { @class = "text-danger" })
            </div>

            <!-- ManufacturedBy -->
            <div class="col-md-4">
                @Html.LabelFor(m => m.ManufacturedBy)
                @Html.TextBoxFor(m => m.ManufacturedBy, new { @class = "form-control", placeholder = "Manufacturer name" })
                @Html.ValidationMessageFor(m => m.ManufacturedBy, "", new { @class = "text-danger" })
            </div>

            <!-- Ingredients & Nutrition Section -->
            <div class="col-md-12">
                <h4 class="section-title">
                    <svg class="icon field-icon" width="24" height="24">
                        <use xlink:href="#icon-ingredients" />
                    </svg>
                    Ingredients & Nutrition
                </h4>
            </div>

            <!-- Ingredients -->
            <div class="col-md-12">
                @Html.LabelFor(m => m.Ingredients)
                @Html.TextAreaFor(m => m.Ingredients, new { @class = "form-control", rows = "3", placeholder = "List all ingredients, separated by commas" })
                @Html.ValidationMessageFor(m => m.Ingredients, "", new { @class = "text-danger" })
            </div>

            <!-- NutritionInfo -->
            <div class="col-md-12">
                @Html.LabelFor(m => m.NutritionInfo)
                @Html.TextBoxFor(m => m.NutritionInfo, new { @class = "form-control", placeholder = "Nutritional information per 100g" })
                @Html.ValidationMessageFor(m => m.NutritionInfo, "", new { @class = "text-danger" })
            </div>

            <!-- Dimensions Section -->
            <div class="col-md-12">
                <h4 class="section-title">
                    <svg class="icon field-icon" width="24" height="24">
                        <use xlink:href="#icon-dimensions" />
                    </svg>
                    Dimensions & Weight
                </h4>
            </div>

            <!-- WidthCm -->
            <div class="col-md-3">
                @Html.LabelFor(m => m.WidthCm)
                <div class="input-group">
                    @Html.TextBoxFor(m => m.WidthCm, new { @class = "form-control", placeholder = "Width" })
                    <span class="input-group-text">cm</span>
                </div>
                @Html.ValidationMessageFor(m => m.WidthCm, "", new { @class = "text-danger" })
            </div>

            <!-- HeightCm -->
            <div class="col-md-3">
                @Html.LabelFor(m => m.HeightCm)
                <div class="input-group">
                    @Html.TextBoxFor(m => m.HeightCm, new { @class = "form-control", placeholder = "Height" })
                    <span class="input-group-text">cm</span>
                </div>
                @Html.ValidationMessageFor(m => m.HeightCm, "", new { @class = "text-danger" })
            </div>

            <!-- DepthCm -->
            <div class="col-md-3">
                @Html.LabelFor(m => m.DepthCm)
                <div class="input-group">
                    @Html.TextBoxFor(m => m.DepthCm, new { @class = "form-control", placeholder = "Depth" })
                    <span class="input-group-text">cm</span>
                </div>
                @Html.ValidationMessageFor(m => m.DepthCm, "", new { @class = "text-danger" })
            </div>

            <!-- WeightG -->
            <div class="col-md-3">
                @Html.LabelFor(m => m.WeightG)
                <div class="input-group">
                    @Html.TextBoxFor(m => m.WeightG, new { @class = "form-control", placeholder = "Weight" })
                    <span class="input-group-text">gm</span>
                </div>
                @Html.ValidationMessageFor(m => m.WeightG, "", new { @class = "text-danger" })
            </div>

            <!-- Submit -->
            <div class="form-submit">
                <button type="submit" class="btn btn-primary px-4 py-2">
                    <svg class="icon" width="20" height="20" style="margin-right: 8px;">
                        <use xlink:href="#icon-chocolate-bar" />
                    </svg>
                    Add Chocolate Product
                </button>
            </div>
        </div>
    }

    <div class="mt-4 text-center">
        @Html.ActionLink("Back to Product List", "ProductList", null, new { @class = "btn btn-outline-secondary" })
    </div>
</div>
@if (ViewBag.ValidationErrors != null)
{
    <div class="alert alert-danger">
        <h4>Validation Errors:</h4>
        <ul>
            @foreach (var error in ViewBag.ValidationErrors)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

@*<script>
        const dropzone = document.getElementById("dropzone");
        const fileInput = document.getElementById("ImageUpload");
        const previewContainer = document.getElementById("preview-container");

        dropzone.addEventListener("click", () => fileInput.click());

        dropzone.addEventListener("dragover", (e) => {
            e.preventDefault();
            dropzone.classList.add("bg-light");
        });

        dropzone.addEventListener("dragleave", () => {
            dropzone.classList.remove("bg-light");
        });

        dropzone.addEventListener("drop", (e) => {
            e.preventDefault();
            dropzone.classList.remove("bg-light");

            const files = Array.from(e.dataTransfer.files).slice(0, 5);
            fileInput.files = createFileList(files);
            previewImages(files);
        });

        fileInput.addEventListener("change", () => {
            const files = Array.from(fileInput.files).slice(0, 5);
            previewImages(files);
        });

        function previewImages(files) {
            previewContainer.innerHTML = "";
            let imageNames = [];

            files.forEach((file, index) => {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const img = document.createElement("img");
                    img.src = e.target.result;
                    img.classList.add("img-thumbnail");
                    img.style.maxWidth = "120px";
                    img.style.maxHeight = "120px";
                    previewContainer.appendChild(img);
                };
                reader.readAsDataURL(file);

                imageNames.push(file.name); // Save filename (or real URL if uploaded)
            });

            // Save comma-separated image names in hidden field
            document.getElementById("ImageUrl").value = imageNames.join(",");
        }

        function createFileList(files) {
            const dataTransfer = new DataTransfer();
            files.forEach(file => dataTransfer.items.add(file));
            return dataTransfer.files;
        }
    </script>*@

<script>
    const dropzone = document.getElementById("dropzone");
    const fileInput = document.getElementById("ImageUpload");
    const previewContainer = document.getElementById("preview-container");

    dropzone.addEventListener("click", () => fileInput.click());

    dropzone.addEventListener("dragover", (e) => {
        e.preventDefault();
        dropzone.classList.add("bg-light");
    });

    dropzone.addEventListener("dragleave", () => {
        dropzone.classList.remove("bg-light");
    });

    dropzone.addEventListener("drop", (e) => {
        e.preventDefault();
        dropzone.classList.remove("bg-light");

        const files = Array.from(e.dataTransfer.files).slice(0, 5);
        fileInput.files = createFileList(files);
        previewImages(files);
    });

    fileInput.addEventListener("change", () => {
        const files = Array.from(fileInput.files).slice(0, 5);
        previewImages(files);
    });

    function previewImages(files) {
        previewContainer.innerHTML = "";
        let imageNames = [];

        files.forEach((file, index) => {
            const reader = new FileReader();
            reader.onload = function (e) {
                const img = document.createElement("img");
                img.src = e.target.result;
                img.classList.add("img-thumbnail");
                img.style.maxWidth = "120px";
                img.style.maxHeight = "120px";
                previewContainer.appendChild(img);
            };
            reader.readAsDataURL(file);
            imageNames.push(file.name);
        });

        document.getElementById("ImageUrl").value = imageNames.join(",");
    }

    function createFileList(files) {
        const dataTransfer = new DataTransfer();
        files.forEach(file => dataTransfer.items.add(file));
        return dataTransfer.files;
    }
</script>
