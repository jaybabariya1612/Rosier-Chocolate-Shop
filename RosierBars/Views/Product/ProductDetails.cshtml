@model RosierBars.Models.ProductModel

@{
    ViewBag.Title = "Chocolate Product Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    :root {
        --chocolate-dark: #4B2C20;
        --chocolate-medium: #7B3F00;
        --chocolate-light: #D2691E;
        --chocolate-cream: #FFF8E1;
        --chocolate-gold: #FFD700;
        --chocolate-milk: #F5F5DC;
    }

    body {
        background-color: var(--chocolate-cream);
        font-family: 'Montserrat', sans-serif;
    }

    .details-container {
        max-width: 1000px;
        margin: 50px auto;
        background: white;
        border-radius: 12px;
        padding: 30px;
        box-shadow: 0 10px 30px rgba(75, 44, 32, 0.1);
        border: 1px solid var(--chocolate-light);
    }

    .details-header {
        text-align: center;
        margin-bottom: 30px;
        padding-bottom: 15px;
        border-bottom: 2px solid var(--chocolate-light);
    }

    .details-title {
        color: var(--chocolate-dark);
        font-weight: 700;
        font-size: 2rem;
        position: relative;
    }

        .details-title:after {
            content: "";
            position: absolute;
            bottom: -17px;
            left: 50%;
            transform: translateX(-50%);
            width: 100px;
            height: 4px;
            background: linear-gradient(90deg, var(--chocolate-gold), var(--chocolate-light));
            border-radius: 2px;
        }

    .product-details {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
    }

    .detail-card {
        background-color: var(--chocolate-milk);
        border-radius: 8px;
        padding: 15px;
        border: 1px solid var(--chocolate-light);
    }

    .detail-label {
        font-weight: 600;
        color: var(--chocolate-dark);
        margin-bottom: 5px;
    }

    .detail-value {
        color: var(--chocolate-medium);
    }

    .image-gallery {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 15px;
        margin-top: 20px;
    }

    .product-image {
        width: 100%;
        height: 150px;
        object-fit: cover;
        border-radius: 8px;
        border: 2px solid var(--chocolate-light);
    }

    .action-buttons {
        display: flex;
        justify-content: center;
        gap: 15px;
        margin-top: 30px;
    }

    .btn {
        padding: 10px 20px;
        border-radius: 50px;
        font-weight: 600;
        transition: all 0.3s;
    }

    .btn-edit {
        background-color: var(--chocolate-medium);
        color: white;
        border: none;
    }

        .btn-edit:hover {
            background-color: var(--chocolate-dark);
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(75, 44, 32, 0.2);
        }

    .btn-back {
        background-color: white;
        color: var(--chocolate-medium);
        border: 1px solid var(--chocolate-medium);
    }

        .btn-back:hover {
            background-color: var(--chocolate-light);
            color: white;
        }

    .btn-pdf {
        background-color: #dc3545;
        color: white;
        border: none;
    }

        .btn-pdf:hover {
            background-color: #c82333;
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(220, 53, 69, 0.2);
        }

    .section-title {
        font-size: 1.3rem;
        color: var(--chocolate-medium);
        font-weight: 600;
        margin: 30px 0 15px;
        border-bottom: 1px solid var(--chocolate-light);
        padding-bottom: 8px;
    }

    @@media (max-width: 768px) {
        .details-container {
            padding: 20px;
            margin: 15px;
        }

        .product-details {
            grid-template-columns: 1fr;
        }

        .action-buttons {
            flex-direction: column;
            align-items: center;
        }
    }
</style>

<div class="details-container mt-5" id="productDetails">
    <div class="details-header">
        <h2 class="details-title">@Model.ProductName Details</h2>
    </div>

    <!-- Product Images -->
    @if (!string.IsNullOrEmpty(Model.ImageUrl))
    {
        <h4 class="section-title">Product Images</h4>
        <div class="image-gallery">
            @foreach (var imageUrl in Model.ImageUrl.Split(','))
            {
                if (!string.IsNullOrEmpty(imageUrl))
                {
                    <img src="@Url.Content("~/Content/images/" + imageUrl)" class="product-image" alt="Product image" />
                }
            }
        </div>
    }

    <!-- Basic Information -->
    <h4 class="section-title">Basic Information</h4>
    <div class="product-details">
        <div class="detail-card">
            <div class="detail-label">@Html.DisplayNameFor(model => model.ProductId)</div>
            <div class="detail-value">@Model.ProductId</div>
        </div>
        <div class="detail-card">
            <div class="detail-label">@Html.DisplayNameFor(model => model.Brand)</div>
            <div class="detail-value">@Model.Brand</div>
        </div>
        <div class="detail-card">
            <div class="detail-label">@Html.DisplayNameFor(model => model.ModelName)</div>
            <div class="detail-value">@Model.ModelName</div>
        </div>
        <div class="detail-card">
            <div class="detail-label">@Html.DisplayNameFor(model => model.Description)</div>
            <div class="detail-value">@Model.Description</div>
        </div>
    </div>

    <!-- Pricing Information -->
    <h4 class="section-title">Pricing Information</h4>
    <div class="product-details">
        <div class="detail-card">
            <div class="detail-label">@Html.DisplayNameFor(model => model.Price)</div>
            <div class="detail-value">₹@Model.Price.ToString("0.00")</div>
        </div>
        <div class="detail-card">
            <div class="detail-label">@Html.DisplayNameFor(model => model.OriginalPrice)</div>
            <div class="detail-value">₹@Model.OriginalPrice.ToString("0.00")</div>
        </div>
        <div class="detail-card">
            <div class="detail-label">@Html.DisplayNameFor(model => model.DiscountPercent)</div>
            <div class="detail-value">@Model.DiscountPercent%</div>
        </div>
    </div>

    <!-- Product Characteristics -->
    <h4 class="section-title">Product Characteristics</h4>
    <div class="product-details">
        <div class="detail-card">
            <div class="detail-label">@Html.DisplayNameFor(model => model.Flavor)</div>
            <div class="detail-value">@Model.Flavor</div>
        </div>
        <div class="detail-card">
            <div class="detail-label">@Html.DisplayNameFor(model => model.Type)</div>
            <div class="detail-value">@Model.Type</div>
        </div>
        <div class="detail-card">
            <div class="detail-label">@Html.DisplayNameFor(model => model.FoodPreference)</div>
            <div class="detail-value">@Model.FoodPreference</div>
        </div>
        <div class="detail-card">
            <div class="detail-label">@Html.DisplayNameFor(model => model.PackOf)</div>
            <div class="detail-value">@Model.PackOf</div>
        </div>
        <div class="detail-card">
            <div class="detail-label">@Html.DisplayNameFor(model => model.NetQuantity)</div>
            <div class="detail-value">@Model.NetQuantity</div>
        </div>
        <div class="detail-card">
            <div class="detail-label">@Html.DisplayNameFor(model => model.ShelfLife)</div>
            <div class="detail-value">@Model.ShelfLife</div>
        </div>
    </div>

    <!-- Quality Indicators -->
    <h4 class="section-title">Quality Indicators</h4>
    <div class="product-details">
        <div class="detail-card">
            <div class="detail-label">@Html.DisplayNameFor(model => model.IsGourmet)</div>
            <div class="detail-value">@(Model.IsGourmet)</div>
        </div>
        <div class="detail-card">
            <div class="detail-label">@Html.DisplayNameFor(model => model.IsHomemade)</div>
            <div class="detail-value">@(Model.IsHomemade)</div>
        </div>
        <div class="detail-card">
            <div class="detail-label">@Html.DisplayNameFor(model => model.IsGiftPack)</div>
            <div class="detail-value">@(Model.IsGiftPack)</div>
        </div>
    </div>

    <!-- Ratings & Reviews -->
    <h4 class="section-title">Ratings & Reviews</h4>
    <div class="product-details">
        <div class="detail-card">
            <div class="detail-label">@Html.DisplayNameFor(model => model.Rating)</div>
            <div class="detail-value">@Model.Rating ★ (@Model.TotalRatings ratings)</div>
        </div>
        <div class="detail-card">
            <div class="detail-label">@Html.DisplayNameFor(model => model.TotalReviews)</div>
            <div class="detail-value">@Model.TotalReviews</div>
        </div>
    </div>

    <!-- Inventory -->
    <h4 class="section-title">Inventory</h4>
    <div class="product-details">
        <div class="detail-card">
            <div class="detail-label">@Html.DisplayNameFor(model => model.Available)</div>
            <div class="detail-value">@(Model.Available)</div>
        </div>
        <div class="detail-card">
            <div class="detail-label">@Html.DisplayNameFor(model => model.Stock)</div>
            <div class="detail-value">@Model.Stock units</div>
        </div>
    </div>

    <!-- Business Details -->
    <h4 class="section-title">Business Details</h4>
    <div class="product-details">
        <div class="detail-card">
            <div class="detail-label">@Html.DisplayNameFor(model => model.Seller)</div>
            <div class="detail-value">@Model.Seller</div>
        </div>
        <div class="detail-card">
            <div class="detail-label">@Html.DisplayNameFor(model => model.ManufacturedBy)</div>
            <div class="detail-value">@Model.ManufacturedBy</div>
        </div>
        <div class="detail-card">
            <div class="detail-label">@Html.DisplayNameFor(model => model.NoReturnsAllowed)</div>
            <div class="detail-value">@(Model.NoReturnsAllowed)</div>
        </div>
        <div class="detail-card">
            <div class="detail-label">@Html.DisplayNameFor(model => model.GstInvoiceAvailable)</div>
            <div class="detail-value">@(Model.GstInvoiceAvailable)</div>
        </div>
    </div>

    <!-- Product Specifications -->
    <h4 class="section-title">Product Specifications</h4>
    <div class="product-details">
        <div class="detail-card">
            <div class="detail-label">@Html.DisplayNameFor(model => model.WidthCm)</div>
            <div class="detail-value">@Model.WidthCm cm</div>
        </div>
        <div class="detail-card">
            <div class="detail-label">@Html.DisplayNameFor(model => model.HeightCm)</div>
            <div class="detail-value">@Model.HeightCm cm</div>
        </div>
        <div class="detail-card">
            <div class="detail-label">@Html.DisplayNameFor(model => model.DepthCm)</div>
            <div class="detail-value">@Model.DepthCm cm</div>
        </div>
        <div class="detail-card">
            <div class="detail-label">@Html.DisplayNameFor(model => model.WeightG)</div>
            <div class="detail-value">@Model.WeightG g</div>
        </div>
    </div>

    <!-- Ingredients & Nutrition -->
    <h4 class="section-title">Ingredients & Nutrition</h4>
    <div class="product-details">
        <div class="detail-card">
            <div class="detail-label">@Html.DisplayNameFor(model => model.Ingredients)</div>
            <div class="detail-value">@Model.Ingredients</div>
        </div>
        <div class="detail-card">
            <div class="detail-label">@Html.DisplayNameFor(model => model.NutritionInfo)</div>
            <div class="detail-value">@Model.NutritionInfo</div>
        </div>
    </div>

    <!-- Dates -->
    <h4 class="section-title">Dates</h4>
    <div class="product-details">
        <div class="detail-card">
            <div class="detail-label">@Html.DisplayNameFor(model => model.CreatedAt)</div>
            <div class="detail-value">@Model.CreatedAt.ToString("dd MMM yyyy")</div>
        </div>
        <div class="detail-card">
            <div class="detail-label">@Html.DisplayNameFor(model => model.UpdatedAt)</div>
            <div class="detail-value">@Model.UpdatedAt.ToString("dd MMM yyyy")</div>
        </div>
    </div>

    <div class="action-buttons" id="pdfExclude">
        @Html.ActionLink("Edit", "ProductEdit", new { id = Model.ProductId }, new { @class = "btn btn-edit" })
        <button id="exportPdf" class="btn btn-pdf">Export to PDF</button>
        @Html.ActionLink("Back to List", "ProductList", null, new { @class = "btn btn-back" })
    </div>

</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>
<script>
    document.getElementById('exportPdf').addEventListener('click', function () {
        const element = document.getElementById('productDetails');
        const exclude = document.getElementById('pdfExclude');
        const btn = this;
        const originalText = btn.innerHTML;

        btn.innerHTML = 'Generating PDF...';
        btn.disabled = true;

        // Hide the buttons before export
        exclude.style.display = 'none';

        const opt = {
            margin: [5, 5, 5, 5],
            filename: '@Model.ProductName - Product Details.pdf',
            image: { type: 'jpeg', quality: 1 },
            html2canvas: {
                scale: 3,
                useCORS: true,
                allowTaint: false,
                scrollX: 0,
                scrollY: 0,
                windowWidth: document.body.scrollWidth
            },
            jsPDF: {
                unit: 'mm',
                format: 'a4',
                orientation: 'portrait'
            },
            pagebreak: { mode: ['avoid-all', 'css', 'legacy'] }
        };

        html2pdf().set(opt).from(element).save().then(() => {
            // Restore button visibility after export
            exclude.style.display = 'flex';
            btn.innerHTML = originalText;
            btn.disabled = false;
        }).catch(() => {
            exclude.style.display = 'flex';
            btn.innerHTML = originalText;
            btn.disabled = false;
        });
    });
</script>

